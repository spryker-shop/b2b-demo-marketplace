openapi: 3.1.0
info:
    title: Spryker Products API
    description: API for managing product abstracts and their concrete variants and retrieving store and product attribute configurations.
    version: 1.0.0

paths:
    /product-abstracts:
        get:
            summary: Search and list product abstracts - Returns paginated list of product abstracts with basic info (SKU, name, store relations, product abstract pricing, localized attributes). Optionally includes concrete variants. NO stock, product concrete pricing, or category data available. Input requires 'q' search term, optional pagination params, and 'include=concretes' for variants.
            parameters:
                - $ref: '#/components/parameters/page'
                - $ref: '#/components/parameters/limit'
                - $ref: '#/components/parameters/offset'
                - $ref: '#/components/parameters/include'
                - $ref: '#/components/parameters/q'
            responses:
                '200':
                    description: Paginated abstracts (optionally with embedded concretes)
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductAbstractListResponse'
        post:
            summary: Create new product abstract with variants - Returns the created product abstract data with basic info (SKU, name, store relations, product abstract pricing, localized attributes). NO additional product data like stock, product concrete pricing, or categories. Input requires SKU, prices (use store names and currencies from /stores), localizations (use locale names from /stores), and at least 1 concrete variant with 1 attributes (use /product-attributes for available attribute options) - store relation is optional.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProductAbstractRequest'
            responses:
                '201':
                    description: The successfully created Product abstract in a list response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductAbstractListResponse'
                '400':
                    description: Bad request - validation errors
                '422':
                    description: Unprocessable entity

    /product-abstracts/{abstractSku}:
        get:
            summary: Get specific product abstract details - Returns single product abstract with basic info (SKU, name, store relations, product abstract pricing, localized attributes). Optionally includes concrete variants with 'include=concretes'. NO stock, product concrete pricing, or category data available. Input requires valid abstractSku from previous searches.
            parameters:
                - $ref: '#/components/parameters/abstractSku'
                - $ref: '#/components/parameters/include'
            responses:
                '200':
                    description: "The Product abstract in a list response (optionally with embedded concretes)"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductAbstractListResponse'
                '404':
                    description: "Not found"
        patch:
            summary: Update product abstract properties (only changed properties need to be included) - Returns updated product abstract data with basic info (SKU, name, store relations, product abstract pricing, localized attributes). Only abstract properties can be modified (NOT concrete variants). NO stock, product concrete pricing, or category modifications possible. Input requires abstractSku and any properties to update (stores, currencies, locales from /stores endpoint).
            parameters:
                -   $ref: '#/components/parameters/abstractSku'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProductAbstractRequest'
            responses:
                '200':
                    description: The updated Product abstract in a list response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductAbstractListResponse'
                '400':
                    description: Bad request - validation errors
                '404':
                    description: Not found

    /product-abstracts/{abstractSku}/concretes:
        get:
            summary: List concrete variants for abstract - Returns array of concrete product variants with product attributes, product concrete pricing, stock and localized data. NO category available. Input requires valid abstractSku and 'q' search term for variant filtering.
            parameters:
                - $ref: '#/components/parameters/abstractSku'
                - $ref: '#/components/parameters/q'
            responses:
                '200':
                    description: List of variants for the given abstract
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductConcreteListResponse'
        post:
            summary: Create new concrete variant for abstract - Returns the created concrete product data. Input requires valid abstractSku and concrete product data (sku, attributes, localizations, product concrete prices). Possible attribute options are defined in /product-attributes?concreteSku= endpoint.
            parameters:
                - $ref: '#/components/parameters/abstractSku'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProductConcreteRequest'

            responses:
                '201':
                    description: The successfully created concrete product
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductConcreteListResponse'
                '400':
                    description: Bad request - validation errors
                '422':
                    description: Unprocessable entity

    /product-abstracts/{abstractSku}/concretes/{concreteSku}:
        get:
            summary: Get single concrete variant details - Returns specific concrete product variant with attributes, product concrete pricing, stocks and localized data. NO category data available. Input requires valid abstractSku and concreteSku from previous listings.
            parameters:
                - $ref: '#/components/parameters/abstractSku'
                - $ref: '#/components/parameters/concreteSku'
            responses:
                '200':
                    description: "Product concrete (scoped to its abstract)"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductConcreteListResponse'
                '404':
                    description: Not found
        patch:
            summary: Update concrete variant properties (only changed properties need to be included) - Returns updated concrete product data. Input requires valid abstractSku and concreteSku, plus any properties to update (attributes, localizations, product concrete prices, stocks). Possible attribute options are defined in /product-attributes?concreteSku= endpoint.
            parameters:
                - $ref: '#/components/parameters/abstractSku'
                - $ref: '#/components/parameters/concreteSku'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProductConcreteRequest'

            responses:
                '200':
                    description: The updated concrete product
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductConcreteListResponse'
                '400':
                    description: Bad request - validation errors
                '404':
                    description: Not found

    /stores:
        get:
            summary: Get available stores configuration - Returns list of store names, available currency codes, and locale names. NO store details like addresses, settings, operational data, or stock information. This data is needed for creating/updating products (storeName, currencyCode, localeName fields). No input parameters required.
            responses:
                '200':
                    description: List of available stores with their available currency list and available locale list
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StoresListResponse'


    /product-attributes:
        get:
            summary: Get available product attribute definitions - Returns ONLY list of available attribute definitions with their possible values. NOT the actual attributes of specific products (use other endpoints for that). Use WITHOUT concreteSku when creating concrete for a new product abstract to see available attributes. Use WITH concreteSku when adding concrete variants to existing abstracts to see contextual attributes.
            parameters:
                - name: concreteSku
                  in: query
                  required: false
                  description: "Optional concrete product SKU for context. Use WITHOUT this parameter when creating concrete for a new product abstract to get all available attributes. Use WITH this parameter when adding concrete variants to existing abstracts to get contextual attribute options."
                  schema:
                    type: string
                    example: "CAMERA-1000-BLK"
            responses:
                '200':
                    description: List of available attribute definitions
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductAttributesListResponse'

    /customers:
        get:
            summary: Get registered customers
            parameters:
                - name: q
                  in: query
                  description: "Find customers according provided query."
                  required: false
                  schema:
                      type: string
                      example: "customer@email.find"
            responses:
                '200':
                    description: List of registered customers
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    customers:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                email:
                                                    type: string
                                                    format: email

    /orders:
        post:
            summary: Create a new order by providing cart details (incl. order/invoice reference, subtotal and grandtotal), items, and customer information. Returns ONLY the created order ID and status. Store information is available via /stores endpoint.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [cart, items, customer]
                            properties:
                                cart:
                                    type: object
                                    description: Cart details for the order.
                                    required: [name, priceMode, localeName, currencyCode, orderReference, storeName, subTotal, grandTotal]
                                    properties:
                                        name:
                                            type: string
                                            description: "Name of the cart for easy recognition"
                                            minLength: 1
                                        priceMode:
                                            type: string
                                            enum: ["GROSS_MODE", "NET_MODE"]
                                        storeName:
                                            type: string
                                            description: Store identifier (list can be retrieved from /stores endpoint)
                                            example: "DE"
                                        localeName:
                                            type: string
                                            description: Locale identifier (list can be retrieved from /stores endpoint)
                                            example: "de_DE"
                                        currencyCode:
                                            type: string
                                            description: Currency code (list can be retrieved from /stores endpoint)
                                            example: "EUR"
                                        orderReference:
                                            type: string
                                            description: "Order/invoice reference for the order"
                                            example: "ORDER-10001"
                                        discountTotal:
                                            type: integer
                                            description: "Optional discount total in minor units (cents)."
                                            minimum: 0
                                            example: 4999
                                        subTotal:
                                            type: integer
                                            description: "Subtotal in minor units (cents)."
                                            minimum: 1
                                            example: 9998
                                        grandTotal:
                                            type: integer
                                            description: "Grand total in minor units (cents)."
                                            minimum: 1
                                            example: 14999
                                items:
                                    type: array
                                    minItems: 1
                                    items:
                                        type: object
                                        description: List of items to add to the cart (sku and quantity).
                                        required: [concreteSku, quantity, unitPrice]
                                        properties:
                                            concreteSku:
                                                type: string
                                                description: "Concrete product SKU. Access list of SKUs via /product-abstracts and /product-abstracts/{abstractSku}/concretes endpoints."
                                                example: "CAMERA-1000-RED"
                                            quantity:
                                                type: integer
                                                minimum: 1
                                                description: "Quantity of the item to add to the cart"
                                            unitPrice:
                                                type: integer
                                                minimum: 1
                                                description: "Unit price in minor units (cents)."
                                                example: 19999
                                customer:
                                    description: Registered customer information for checkout. Check existing customers in /customers endpoint
                                    type: object
                                    required: [email, billingAddress, shippingAddress]
                                    properties:
                                        email:
                                            type: string
                                            format: email
                                        billingAddress:
                                            type: object
                                            required: [firstName, lastName, address1, city, zipCode, countryCode]
                                            properties:
                                                firstName: { type: string }
                                                lastName: { type: string }
                                                address1: { type: string }
                                                address2: { type: string }
                                                city: { type: string }
                                                zipCode: { type: string }
                                                countryCode:
                                                    type: string
                                                    example: "DE"
                                                phone: { type: string }
                                        shippingAddress:
                                            type: object
                                            required: [firstName, lastName, address1, city, zipCode, countryCode]
                                            properties:
                                                firstName: { type: string }
                                                lastName: { type: string }
                                                address1: { type: string }
                                                address2: { type: string }
                                                city: { type: string }
                                                zipCode: { type: string }
                                                countryCode:
                                                    type: string
                                                    example: "DE"
                                                phone: { type: string }

            responses:
                '201':
                    description: Order created successfully. Returns the order ID and status.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    orderReference: { type: string, description: "Unique identifier for the created order." }
                                    status: { type: string, example: "ok" }
                '400':
                    description: Bad request. The input data is invalid or incomplete.

components:
    parameters:
        page: { name: page, in: query, schema: { type: integer, minimum: 1, default: 1 } }
        limit: { name: limit, in: query, schema: { type: integer, minimum: 1, maximum: 15, default: 5 } }
        store: { name: store, in: query, description: Spryker store (e.g., DE), schema: { type: string } }
        locale: { name: locale, in: query, description: e.g., en_US, de_DE, schema: { type: string } }
        abstractSku: { name: abstractSku, in: path, required: true, schema: { type: string } }
        concreteSku: { name: concreteSku, in: path, required: true, schema: { type: string } }
        offset: { name: offset, in: query, schema: { type: integer, minimum: 0, default: 0 }, description: Number of items to skip (for pagination) }
        q: { name: q, in: query, required: true, description: "The q query parameter, allows text search on sku and name - pass empty string to list all items", schema: { type: string } }
        include: { name: include, in: query, description: "Include nested resources. Supported: concretes", schema: { type: string, example: "concretes" } }

    schemas:

        CreateProductConcreteRequest:
            type: object
            description: "Request structure for creating a new concrete product variant under a specific existing abstract product."
            required: [sku, attributes, localizations, prices]
            properties:
                sku:
                    type: string
                    description: "Concrete product SKU"
                    example: "CAMERA-1000-RED"
                attributes:
                    type: object
                    description: "Product attributes as key-value pairs. Minimum 1 attribute is mandatory. Possible attributes options are defined in /product-attributes?concreteSku= endpoint ."
                    additionalProperties:
                        type: string
                    example: { "color": "red", "size": "medium" }
                localizations:
                    type: array
                    description: "Localized content for different locales (use locale names from /stores)"
                    minItems: 1
                    items:
                        $ref: '#/components/schemas/CreateLocalizationRequest'
                prices:
                    type: array
                    description: "Optional pricing information (use store names and currencies from /stores)"
                    items:
                        $ref: '#/components/schemas/CreatePriceRequest'
                stocks:
                    type: array
                    description: "Optional stock/inventory information"
                    items:
                        $ref: '#/components/schemas/StockInformation'

        StockInformation:
            type: object
            properties:
                quantity:
                    type: integer
                    description: "Stock quantity"
                    example: 100
                isNeverOutOfStock:
                    type: boolean
                    description: "Whether product is never out of stock"
                    example: false

        UpdateProductConcreteRequest:
            type: object
            required: []
            properties:
                attributes:
                    type: object
                    description: "Product attributes as key-value pairs. Minimum 1 attribute is mandatory. Possible attributes options are defined in /product-attributes?concreteSku= endpoint ."
                    additionalProperties:
                        type: string
                    example: { "color": "blue", "size": "large" }
                localizations:
                    type: array
                    description: "Localized content for different locales (use locale names from /stores)"
                    items:
                        $ref: '#/components/schemas/CreateLocalizationRequest'
                prices:
                    type: array
                    description: "Pricing information (use store names and currencies from /stores)"
                    items:
                        $ref: '#/components/schemas/CreatePriceRequest'
                stocks:
                    type: array
                    description: "Stock/inventory information"
                    items:
                        $ref: '#/components/schemas/StockInformation'

        StoresListResponse:
            type: object
            properties:
                stores:
                    type: array
                    items:
                        type: object
                        properties:
                            storeName:
                                type: string
                                example: DE
                availableCurrencyCodes:
                    type: array
                    items:
                        type: string
                    example: ["EUR"]
                availableLocaleNames:
                    type: array
                    items:
                        type: string
                    example: ["en_US"]

        ProductAttributesListResponse:
            type: object
            properties:
                status:
                    type: string
                    description: "Status of the response"
                    example: "ok"
                result:
                    type: array
                    description: "Array of available attribute definitions"
                    items:
                        type: object
                        properties:
                            attribute_key:
                                type: string
                                description: "Attribute key name (never null)"
                                example: "color"
                            choices:
                                type: array
                                description: "Available predefined choices for this attribute (can be empty but never null)"
                                items:
                                    type: string
                                example: ["red", "blue", "black", "white"]
                            is_mandatory:
                                type: boolean
                                description: "Whether this attribute is mandatory for concretes or optional (always true or false)"
                                example: true
                            free_text:
                                type: boolean
                                description: "Whether this attribute accepts free text values (always true or false) or only the predefined choices"
                                example: false

        ProductAbstractListResponse:
            type: object
            description: "Response structure for listing product abstracts and their concrete variants (no stock, product concrete price or category info). Includes status, result (with pagination, product_abstracts, and product_concretes)."
            properties:
                status:
                    type: string
                    description: "Status of the response (e.g. 'ok')."
                    example: "ok"
                result:
                    type: object
                    description: "Main result object containing pagination, product abstracts, and product concretes."
                    properties:
                        product_abstracts:
                            type: array
                            description: "List of product abstract objects."
                            items:
                                type: object
                                properties:
                                    id_product_abstract:
                                        type: integer
                                        example: 417
                                    sku:
                                        type: string
                                        example: "CAMERA-1000"
                                    name:
                                        type: string
                                        example: "Camera 1000"
                                    approval_status:
                                        type: string
                                        example: "approved"
                                    new_from:
                                        type: [string, "null"]
                                        nullable: true
                                        example: "2025-09-11T00:00:00+00:00"
                                    new_to:
                                        type: [string, "null"]
                                        nullable: true
                                        example: "2025-09-11T00:00:00+00:00"
                                    prices:
                                        type: array
                                        description: "Price information for the product abstract."
                                        items:
                                            $ref: '#/components/schemas/CreatePriceRequest'

                                    store_relation:
                                        type: object
                                        properties:
                                            stores:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        name:
                                                            type: string
                                                            example: "DE"
                                                        id_store:
                                                            type: integer
                                                            example: 1
                                    localized_attributes:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/LocalizationResponse'

                        product_concretes:
                            type: array
                            description: "List of product concrete collections grouped by abstract SKU."
                            items:
                                type: object
                                properties:
                                    product_abstract_sku:
                                        type: string
                                        example: "CAMERA-1000"
                                    product_concretes:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                sku:
                                                    type: string
                                                    example: "CAMERA-1000-variant-base"
                                                attributes:
                                                    type: object
                                                    additionalProperties: true
                                                    example: {"variant": "base"}
                                                abstract_sku:
                                                    type: string
                                                    example: "CAMERA-1000"
                                                is_active:
                                                    type: boolean
                                                    example: true
                                                stores:
                                                    type: array
                                                    items:
                                                        type: object
                                                        properties:
                                                            name:
                                                                type: string
                                                                example: "DEFAULT"
                                                            id_store:
                                                                type: integer
                                                                example: 1
                                                localized_attributes:
                                                    type: array
                                                    items:
                                                        $ref: '#/components/schemas/LocalizationResponse'


        ProductConcreteListResponse:
            type: object
            description: "Response structure for listing product concrete variants for a given abstract product  (no category info)."
            properties:
                status:
                    type: string
                    description: "Status of the response (e.g. 'ok')."
                    example: "ok"
                result:
                    type: array
                    description: "Array of concrete product objects."
                    items:
                        type: object
                        properties:
                            sku:
                                type: string
                                description: "Concrete product SKU."
                                example: "CAMERA-1000-BLK"
                            attributes:
                                type: object
                                description: "Key-value attributes for the concrete product."
                                example: { color: "black" }
                            abstract_sku:
                                type: string
                                description: "SKU of the parent abstract product."
                                example: "CAMERA-1000"
                            is_active:
                                type: boolean
                                description: "Whether the concrete product is active."
                                example: true
                            prices:
                                type: array
                                description: "Price information for the concrete product."
                                items:
                                    $ref: '#/components/schemas/CreatePriceRequest'

                            stocks:
                                type: array
                                description: "Stock/inventory information for the concrete product."
                                items:
                                    $ref: '#/components/schemas/StockInformation'

                            localized_attributes:
                                type: array
                                description: "Localized attributes for the concrete product."
                                items:
                                    $ref: '#/components/schemas/LocalizationResponse'

        LocalizedStringMap:
            type: object
            additionalProperties: { type: string }
        AttributeMap:
            type: object
            additionalProperties:
                oneOf:
                    - type: string
                    - type: number
                    - type: integer
                    - type: boolean
                    - type: array
                      items:
                          oneOf: [{type: string},{type: number},{type: integer},{type: boolean}]
        Stock:
            type: object
            required: [warehouse, quantity, isNeverOutOfStock]
            properties:
                warehouse: { type: string }
                quantity: { type: integer }
                isNeverOutOfStock: { type: boolean }

        CreateProductAbstractRequest:
            type: object
            required: [sku, prices, localizations, concretes]
            properties:
                sku:
                    type: string
                    description: Product abstract SKU
                    example: "camera-1000"
                    pattern: '^[a-z0-9_-]+$'
                    minLength: 1
                newFrom:
                    type: string
                    format: date-time
                    description: Product available from date
                    example: "2025-09-11T00:00:00+00:00"
                newTo:
                    type: string
                    format: date-time
                    description: Product available until date
                    example: "2025-09-30T23:59:59+00:00"
                stores:
                    type: array
                    description: List of store identifiers where the product is available (list can be retrieved from /stores endpoint)
                    minItems: 0
                    items:
                        type: string
                    example: ["DE","AT"]
                prices:
                    type: array
                    description: Pricing information for different stores/currencies
                    minItems: 1
                    items:
                        $ref: '#/components/schemas/CreatePriceRequest'
                localizations:
                    type: array
                    description: Localized content for different locales
                    minItems: 1
                    items:
                        $ref: '#/components/schemas/CreateLocalizationRequest'
                concretes:
                    type: array
                    description: Concrete product variants (at least 1 required)
                    minItems: 1
                    items:
                        type: object
                        required: [attributes, localizations]
                        properties:
                            attributes:
                                type: object
                                description: "Product attributes as key-value pairs. Minimum 1 attribute is mandatory. Possible attributes options are defined in /product-attributes endpoint ."
                                additionalProperties: { type: string }
                                example: { "color": "red", "size": "M" }
                            localizations:
                                type: array
                                description: Localized content for this concrete variant
                                minItems: 1
                                items:
                                    $ref: '#/components/schemas/CreateLocalizationRequest'

        CreatePriceRequest:
            type: object
            required: [storeName, currencyCode, priceTypeName]
            properties:
                storeName:
                    type: string
                    description: Store identifier (list can be retrieved from /stores endpoint)
                    example: "DE"
                currencyCode:
                    type: string
                    description: Currency code (list can be retrieved from /stores endpoint)
                    example: "EUR"
                priceTypeName:
                    type: string
                    description: Price type name (stick to "DEFAULT")
                    example: "DEFAULT"
                grossAmount:
                    type: [integer, "null"]
                    nullable: true
                    description: Gross amount in minor units (cents)
                    example: 19999
                netAmount:
                    type: [integer, "null"]
                    nullable: true
                    description: Net amount in minor units (cents)
                    example: 16806



        CreateLocalizationRequest:
            type: object
            required: [localeName, name]
            properties:
                localeName:
                    type: string
                    description: Locale identifier (list can be retrieved from /stores endpoint)
                    example: "de_DE"
                name:
                    type: string
                    description: Localized product name
                    example: "Spiegellose Kamera"
                description:
                    type: [string, "null"]
                    nullable: true
                    description: Localized product description
                    example: "Hochwertige spiegellose Kamera für Profis"
                metaTitle:
                    type: [string, "null"]
                    nullable: true
                    description: SEO meta title
                metaDescription:
                    type: [string, "null"]
                    nullable: true
                    description: SEO meta description
                metaKeywords:
                    type: [string, "null"]
                    nullable: true
                    description: SEO meta keywords

        UpdateProductAbstractRequest:
            type: object
            properties:
                newFrom:
                    type: [string,"null"]
                    nullable: true
                    format: date-time
                    description: Product available from date
                    example: "2025-09-11T00:00:00+00:00"
                newTo:
                    type: [string,"null"]
                    nullable: true
                    format: date-time
                    description: Product available until date
                    example: "2025-09-30T23:59:59+00:00"
                stores:
                    type: array
                    description: List of store identifiers where the product is available (list can be retrieved from /stores endpoint)
                    items:
                        type: string
                    example: [ "DE","AT" ]
                prices:
                    type: array
                    description: Pricing information for different stores/currencies
                    items:
                        $ref: '#/components/schemas/CreatePriceRequest'
                localizations:
                    type: array
                    description: Localized content for different locales
                    items:
                        $ref: '#/components/schemas/CreateLocalizationRequest'
            additionalProperties: false

        LocalizationResponse:
            type: object
            properties:
                locale:
                    type: object
                    properties:
                        locale_name:
                            type: string
                            example: "de_DE"
                name:
                    type: string
                    example: "Spiegellose Kamera"
                description:
                    type: [string, "null"]
                    example: "Hochwertige spiegellose Kamera für Profis"
                meta_title:
                    type: [string, "null"]
                    example: "Beste Kamera"
                meta_description:
                    type: [string, "null"]
                    example: "Dies ist die beste Kamera."
                meta_keywords:
                    type: [string, "null"]
                    example: "Kamera, beste Kamera"
